Below line calculates the number of rows in the Excel sheet. getLastRowNum() returns the index of the last row containing data, 
so adding 1 gives the total number of rows. It assumes that the rows are sequentially numbered and there are no empty rows between the first and last rows.

int rowNum = sheet.getLastRowNum() + 1;

int colNum = sheet.getRow(0).getLastCellNum();: 
Above line calculates the number of columns in the Excel sheet. getRow(0) gets the first row (header row), a
and getLastCellNum() returns the index of the last cell in that row plus one, effectively giving the total number of cells (columns) in that row.

data = new String[rowNum][colNum];: This line initializes a 2D array named data to store the data from the Excel sheet. It's sized according to the number of rows and columns in the Excel sheet.

for (int i = 1; i < rowNum; i++) { ... }: This loop iterates over each row in the Excel sheet starting from the second row (index 1). It skips the first row, assuming it contains headers.

Inside the loop:

XSSFRow row = sheet.getRow(i);: This line gets the current row from the Excel sheet.
Another loop iterates over each cell in the current row (for (int j = 0; j < colNum; j++) { ... }).
XSSFCell cell = row.getCell(j);: This line gets the cell at the current row (i) and column (j) from the Excel sheet.
String value = cellToString(cell);: This line calls a method named cellToString() to convert the contents of the current cell into a string.
data[i-1][j] = value;: This line stores the string value obtained from the cell into the 2D array data, adjusting the indices by subtracting 1 from i to account for skipping the header row.
